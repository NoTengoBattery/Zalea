#===-- EntryPoint.sx - Entry Point for Booting in ARM ----------------------------------------------------*- ASM -*-===#
#
# Copyright (c) 2020 Oever Gonz√°lez
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
#  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
#  specific language governing permissions and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
#===----------------------------------------------------------------------------------------------------------------===#
#/
#/ \file
#/ This file is the entry point for booting in ARM. This is the first code executed by the Main Executable, the address
#/ where the CPU jumps after performing the bootloading sequence. This is also where the reset vector will jump.
#/
#===----------------------------------------------------------------------------------------------------------------===#

#include <config.h>
#define __FILENAME__ "EntryPoint.sx"
#include <AssemblerMagic/AssemblerMagic.h>

NAKED_GLOBAL_ARM_FUNCTION(.start, entry)
/* -------------------------------------------- Setup the Stack Pointer --------------------------------------------- */
  LDR   sp,         =stackStart

/* ------------------------------------------ Call the Second Entry Point ------------------------------------------- */
  BL    secondEntryPoint
  B     miserableFail
NAKED_GLOBAL_ARM_FUNCTION_EPILOG(entry)

/*
 * `miserableFail` is a global function that will fail miserably when an irrecuperable error is detected. This is only
 * true for the very early boot process.
 */
NAKED_GLOBAL_ARM_FUNCTION(.start, miserableFail)
  WFI
  WFE
  B     miserableFail
NAKED_GLOBAL_ARM_FUNCTION_EPILOG(miserableFail)

/*
 * Those are placeholders (needed because LLD will not identify the sections correctly when no data is in the sections)
 * but they are only needed when no data is in the section. Most likely to not happen ever but anyway...
 */

NAKED_GLOBAL_ARM_FUNCTION(.text, textPlaceholder)
  B     textPlaceholder
NAKED_GLOBAL_ARM_FUNCTION_EPILOG(textPlaceholder)

GLOBAL_DATA(dataPlaceholder)
  .string           "dataPlaceholder"
GLOBAL_DATA_EPILOG(dataPlaceholder)

GLOBAL_RODATA(rodataPlaceholder)
  .string           "rodataPlaceholder"
GLOBAL_DATA_EPILOG(rodataPlaceholder)

GLOBAL_RESERVED(reservedPlaceholder)
  .string           "reservedPlaceholder"
GLOBAL_RESERVED_EPILOG(reservedPlaceholder)

GLOBAL_BSS_DATA(bssPlaceholder, 1)
GLOBAL_STACK_DATA(stackPlaceholder, 1)
