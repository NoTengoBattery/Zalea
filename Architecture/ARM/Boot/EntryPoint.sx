#===-- EntryPoint.sx - Entry Point for Booting in ARM ----------------------------------------------------*- ASM -*-===#
#
# Copyright (c) 2020 Oever Gonz√°lez
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
#  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
#  specific language governing permissions and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
#===----------------------------------------------------------------------------------------------------------------===#
#/
#/ \file
#/ This file is the entry point for booting in ARM. This is the first code executed by the Main Executable, the address
#/ where the CPU jumps after performing the bootloading sequence.
#/
#===----------------------------------------------------------------------------------------------------------------===#

#include <config.h>
#include <AssemblerMagic.h>

.section .start, "ax"
.type start, #function
.globl start
start:
  BL start

# Those are placeholders (needed because LLD will not identify the sections correctly when no data is in the sections)
# but they are only needed when no data is in the section. Most likely to not happen ever but anyway...

.section .text, "ax", %progbits
.global textPlaceholder
textPlaceholder:
  BL textPlaceholder

.section .data, "aw", %progbits
.global dataPlaceholder
dataPlaceholder:
  .asciz "dataPlaceholder"

.section .rodata, "a", %progbits
.global rodataPlaceholder
rodataPlaceholder:
  .asciz "rodataPlaceholder"

.section .bss, "aw", %nobits
.global bssPlaceholder
bssPlaceholder:
  .byte 0x00

.section .stack, "aw", %nobits
.global stackPlaceholder
stackPlaceholder:
  .byte 0x00
