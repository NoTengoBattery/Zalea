/*===-- DeviceDescriptor.c - Description of Undiscoverable Device Properties -------------------------------*- C -*-===*
 *
 * Automatically generated file. DO NOT MODIFY THIS FILE: ANY MODIFICATION WILL BE REVERTED.
 *
 * Copyright (c) 2020 Oever Gonz√°lez
 *
 *===---------------------------------------------------------------------------------------------------------------===*
 *
 * \file
 * Contains a Hash Table which contains a set of undiscoverable hardware properties, generated from a JSON file. This
 * is intended to prevent developers from embedding magic addresses, names or general information about the hardware in
 * the source code. Instead, developers will add properties to the JSON file and search them in the Hash Table using a
 * descriptive property name.
 *
 *===--------------------------------------------------------------------------------------------------------------===*/

#include "Include/DeviceDescriptor.h"
#include <CompilerMagic/BitwiseMacros.h>
#include <config.h>
#include <stddef.h>

/// \brief a pre-computed bit mask that will be used to truncate the results to a certain bit length.
static const unsigned bitMask = TRUNCATE_MASK(PROPERTIES_HASH_BITS);
/// \brief the pattern that will be the starting point of the hash.
static const unsigned pattern = 0xA5A5A5A5A5A5A5A5 & bitMask;

// A trivial implementation of the `strlen` function, named differently to avoid overriding the default implementation.
static inline size_t stringLength(const char *string) {
    size_t length = 0;
    while (*string != 0x00) {
        length += 1;
        string += 1;
    }
    return length;
}

// A trivial implementation of the `strcmp` function, named differently to avoid overriding the default implementation.
static inline int stringCompare(const char *string1, const char *string2) {
    unsigned char value1 = (unsigned char) *string1;
    unsigned char value2 = (unsigned char) *string2;
    while (value1 == value2 && value1 != 0x00 && value2 != 0x00) {
        string1 += 1;
        string2 += 1;
        value1 = (unsigned char) *string1;
        value2 = (unsigned char) *string2;
    }
    return value1 - value2;
}

// Calculate the `Hash1` value from a string, given a pointer to the string and it's length.
static inline unsigned calculateHash1(const char *property, const size_t propertyLength) {
    // Start the hash rotating to the left by 1 bit the pattern
    static unsigned rotatedConstant = BRLN(pattern, 0x01U, PROPERTIES_HASH_BITS);
    unsigned value = rotatedConstant;
    // Initialize the loop index (the index of the current char) and the value of the bit char
    size_t characterIndex = 0;
    unsigned char character = (unsigned char) property[characterIndex];
    // Loop to calculate the hash until a null character is found (or the length is depleted)
    while (character != 0x00 && characterIndex < propertyLength) {
        value = BRLN(value, 0x01U, PROPERTIES_HASH_BITS);
        value ^= ~character * ~propertyLength;
        value = BRLN(value, 0x01U, PROPERTIES_HASH_BITS);
        value ^= character * ~propertyLength;
        // Update the loop variables for the next iteration
        characterIndex += 1;
        character = (unsigned char) property[characterIndex];
    }
    value &= bitMask;
    return value;
}

// Calculate the `Hash2` value from a string, given a pointer to the string and it's length.
static inline unsigned calculateHash2(const char *property, const size_t propertyLength) {
    // Start the hash rotating to the right by 1 bit the pattern
    static unsigned rotatedConstant = BRRN(pattern, 0x01U, PROPERTIES_HASH_BITS);
    unsigned value = rotatedConstant;
    // Initialize the loop index (the index of the current char) and the value of the bit char
    size_t characterIndex = 0;
    unsigned char character = (unsigned char) property[characterIndex];
    // Loop to calculate the hash until a null character is found (or the length is depleted)
    while (character != 0x00 && characterIndex < propertyLength) {
        value = BRRN(value, 0x01U, PROPERTIES_HASH_BITS);
        value ^= character * ~propertyLength;
        value = BRRN(value, 0x01U, PROPERTIES_HASH_BITS);
        value ^= ~character * propertyLength;
        // Update the loop variables for the next iteration
        characterIndex += 1;
        character = (unsigned char) property[characterIndex];
    }
    value &= bitMask;
    return value;
}

// Perform a hash table lookup, which is technically a Hopscotch lookup. It does perform the Open-Addressing lookup in
// O(1) time and the Linear lookup in O(n), where n is the foresee value. The string comparison and getting it's length
// is also O(n), where n is the string length, since it uses the trivial implementation. This function only performs the
// Linear lookup, since the Cuckoo part is embedded in the main function.
//
// This function returns NULL if the lookup failed to find the key. It returns a pointer to the struct when it actually
// finds the correct key. It's responsibility of the caller to unpack the value of the corresponding key.
static inline const struct deviceProperty *tableLookup(
        unsigned (*hashing)(const char *, const size_t),
        const char *property,
        const struct deviceProperty *const properties[]) {
    // Get the length of the property, which is an O(n) operation (n is the string length)
    const size_t propertyLength = stringLength(property);
    // Evaluate the hash value, which is a O(n) operation (n is the string length)
    const unsigned hash = (hashing)(property, propertyLength);
    // Get the value stored in the table, using the hash as the index
    const struct deviceProperty *propInTable = properties[hash];
    // If the property is null, return null (which means that the lookup failed)
    if (propInTable == NULL) {
        return NULL;
    }
    // Get the value of the property to compare against the provided property
    const char *key = propInTable->key;
    // Compare the provided string against the name (key) of the property
    if (stringCompare(key, property) == 0) {
        // Found, return the pointer to the struct (don't perform the linear lookup)
        return propInTable;
    }
    // If not found, perform the linear lookup which is an O(n) operation (n is the foresee value)
    const size_t lh = hash - PROPERTIES_HASH_FORESEE; // Calculate the lower hash
    const size_t hh = hash + PROPERTIES_HASH_FORESEE; // Calculate the higher hash
    const size_t pLowerHash = lh > bitMask ? 0 : lh; // Clamp, to avoid out-of-bounds errors
    const size_t pHigherHash = (const size_t) (hh > bitMask ? bitMask : hh); // Clamp, to avoid out-of-bounds errors
    // After sanitizing the foresee, enter the loop with the given numbers (select the correct values here)
    const size_t lowerHash = pLowerHash <= pHigherHash ? pLowerHash : pHigherHash;
    const size_t higherHash = pLowerHash >= pHigherHash ? pLowerHash : pHigherHash;
    for (size_t i = lowerHash; i <= higherHash; i++) {
        // Recall the property in the current position...
        const struct deviceProperty *currentPropInTable = properties[i];
        // ... and then, skip it if it's null or if the current index is the same as the hash (saving us one iteration)
        if (currentPropInTable == NULL || i == hash) {
            continue;
        }
        // Recall the name of the current key in the map (if it's actually not empty)
        const char *currentKey = currentPropInTable->key;
        if (stringCompare(currentKey, property) == 0) {
            // If found, return the pointer to the struct (immediately)
            return currentPropInTable;
        }
    }
    // Return null if everything fails, that means that the lookup failed
    return NULL;
}

// The documentation is in the declaration (the API header)
const char *getDeviceDescriptorProperty(const char *property) {
    // Before calculating a hash, check if the property may be a valid pointer
    if (property == NULL) {
        return NULL;
    }
    // Calculate the first hash (Hash1) and try to solve the value in the table
    const struct deviceProperty *returnValue = tableLookup(&calculateHash1, property, deviceDescriptor);
    // If the first hash fails, try with the second hash (Hash2)... this is the Cuckoo part of the algorithm
    if (returnValue == NULL) {
        // Calculate the second hash (Hash2) and try to solve the value in the table
        returnValue = tableLookup(&calculateHash2, property, deviceDescriptor);
        if (returnValue == NULL) {
            // If not found, return null immediately, which means that the lookup failed
            return NULL;
        }
    }
    // Unpack the string from the struct and return it's pointer (to be further used by the caller)
    return returnValue->value;
}
